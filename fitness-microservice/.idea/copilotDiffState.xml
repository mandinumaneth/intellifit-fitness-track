<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/aiservice/src/main/java/com/fitness/aiservice/controller/RecommendationController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/aiservice/src/main/java/com/fitness/aiservice/controller/RecommendationController.java" />
              <option name="originalContent" value="package com.fitness.aiservice.controller;&#10;&#10;&#10;import com.fitness.aiservice.model.Recommendation;&#10;import com.fitness.aiservice.service.RecommendationService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequiredArgsConstructor&#10;@RequestMapping(&quot;/api/recommendations&quot;)&#10;public class RecommendationController {&#10;    private final RecommendationService recommendationService;&#10;&#10;    @GetMapping(&quot;/user/{userId}&quot;)&#10;    public ResponseEntity&lt;List&lt;Recommendation&gt;&gt; getUserRecommendation(@PathVariable String userId) {&#10;        return ResponseEntity.ok(recommendationService.getUserRecommendations(userId));&#10;    }&#10;&#10;    @GetMapping(&quot;/activity/{activityId}&quot;)&#10;    public ResponseEntity&lt;?&gt; getActivityRecommendation(@PathVariable String activityId) {&#10;        try {&#10;            Recommendation recommendation = recommendationService.getActivityRecommendations(activityId);&#10;            return ResponseEntity.ok(recommendation);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.status(404).body(&quot;Recommendation not found for activity: &quot; + activityId);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.fitness.aiservice.controller;&#10;&#10;&#10;import com.fitness.aiservice.model.Recommendation;&#10;import com.fitness.aiservice.service.RecommendationService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;import org.springframework.web.client.RestTemplate;&#10;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;@RestController&#10;@RequiredArgsConstructor&#10;@RequestMapping(&quot;/api/recommendations&quot;)&#10;public class RecommendationController {&#10;    private final RecommendationService recommendationService;&#10;&#10;    @GetMapping(&quot;/user/{userId}&quot;)&#10;    public ResponseEntity&lt;List&lt;Recommendation&gt;&gt; getUserRecommendation(@PathVariable String userId) {&#10;        return ResponseEntity.ok(recommendationService.getUserRecommendations(userId));&#10;    }&#10;&#10;    @GetMapping(&quot;/activity/{activityId}&quot;)&#10;    public ResponseEntity&lt;?&gt; getActivityRecommendation(@PathVariable String activityId) {&#10;        try {&#10;            Recommendation recommendation = recommendationService.getActivityRecommendations(activityId);&#10;            return ResponseEntity.ok(recommendation);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.status(404).body(&quot;Recommendation not found for activity: &quot; + activityId);&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/activity/{activityId}/full&quot;)&#10;    public ResponseEntity&lt;?&gt; getActivityWithRecommendation(@PathVariable String activityId) {&#10;        try {&#10;            Recommendation recommendation = recommendationService.getActivityRecommendations(activityId);&#10;            // Fetch activity details from activityservice&#10;            ActivityResponse activity = fetchActivityDetails(activityId);&#10;            Map&lt;String, Object&gt; result = new HashMap&lt;&gt;();&#10;            result.put(&quot;activity&quot;, activity);&#10;            result.put(&quot;recommendation&quot;, recommendation);&#10;            return ResponseEntity.ok(result);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.status(404).body(&quot;Recommendation or activity not found for activity: &quot; + activityId);&#10;        }&#10;    }&#10;    // Helper method to fetch activity details from activityservice&#10;    private ActivityResponse fetchActivityDetails(String activityId) {&#10;        // You can use RestTemplate or WebClient here. Example with RestTemplate:&#10;        RestTemplate restTemplate = new RestTemplate();&#10;        String url = &quot;http://localhost:8082/api/activities/&quot; + activityId;&#10;        return restTemplate.getForObject(url, ActivityResponse.class);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gateway/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gateway/src/main/resources/application.yml" />
              <option name="originalContent" value="spring:&#10;  application:&#10;    name: gateway&#10;  cloud:&#10;    gateway:&#10;      routes:&#10;        - id: user-service&#10;          uri: lb://USER-SERVICE&#10;          predicates:&#10;            - Path=/api/users/**&#10;&#10;server:&#10;  port: 8080&#10;&#10;eureka:&#10;  client:&#10;    serviceUrl:&#10;      defaultZone: http://localhost:8761/eureka/&#10;  instance:&#10;    hostname: localhost&#10;    prefer-ip-address: false&#10;    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port}" />
              <option name="updatedContent" value="spring:&#10;  application:&#10;    name: gateway&#10;  cloud:&#10;    gateway:&#10;      server:&#10;        webflux:&#10;          routes:&#10;            - id: user-service&#10;              uri: lb://USER-SERVICE&#10;              predicates:&#10;                - Path=/api/users/**&#10;&#10;server:&#10;  port: 8080&#10;&#10;eureka:&#10;  client:&#10;    serviceUrl:&#10;      defaultZone: http://localhost:8761/eureka/&#10;  instance:&#10;    hostname: localhost&#10;    prefer-ip-address: false&#10;    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>