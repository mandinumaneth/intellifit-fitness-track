<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/fitness-microservice/activityservice/src/main/java/com/fitness/activityservice/exception/GlobalExceptionHandler.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fitness-microservice/activityservice/src/main/java/com/fitness/activityservice/exception/GlobalExceptionHandler.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fitness-microservice/activityservice/src/main/java/com/fitness/activityservice/exception/InvalidUserIdException.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fitness-microservice/activityservice/src/main/java/com/fitness/activityservice/exception/InvalidUserIdException.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fitness-microservice/activityservice/src/main/java/com/fitness/activityservice/exception/UserNotFoundException.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fitness-microservice/activityservice/src/main/java/com/fitness/activityservice/exception/UserNotFoundException.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fitness-microservice/activityservice/src/main/java/com/fitness/activityservice/service/UserValidationService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fitness-microservice/activityservice/src/main/java/com/fitness/activityservice/service/UserValidationService.java" />
              <option name="originalContent" value="package com.fitness.activityservice.service;&#10;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.web.reactive.function.client.WebClient;&#10;import org.springframework.web.reactive.function.client.WebClientException;&#10;import org.springframework.web.reactive.function.client.WebClientResponseException;&#10;&#10;import java.util.concurrent.ExecutionException;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class UserValidationService {&#10;    private  final WebClient userServiceWebClient;&#10;&#10;    public boolean validateUser(String userId){&#10;&#10;        try {&#10;            return userServiceWebClient.get()&#10;                    .uri(&quot;/api/users/{userId}/validate&quot;, userId)&#10;                    .retrieve()&#10;                    .bodyToMono(Boolean.class)&#10;                    .block();&#10;        } catch (WebClientResponseException e) {&#10;            if (e.getStatusCode() == HttpStatus.NOT_FOUND)&#10;                throw new RuntimeException(&quot;User not found&quot;+userId);&#10;            else if (e.getStatusCode() == HttpStatus.BAD_REQUEST)&#10;                throw new RuntimeException(&quot;Invalid user ID: &quot; + userId);&#10;            else&#10;                throw new RuntimeException(&quot;Error validating user: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.fitness.activityservice.service;&#10;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.web.reactive.function.client.WebClient;&#10;import org.springframework.web.reactive.function.client.WebClientException;&#10;import org.springframework.web.reactive.function.client.WebClientResponseException;&#10;&#10;import java.util.concurrent.ExecutionException;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class UserValidationService {&#10;    private  final WebClient userServiceWebClient;&#10;&#10;    public boolean validateUser(String userId){&#10;&#10;        try {&#10;            return userServiceWebClient.get()&#10;                    .uri(&quot;/api/users/{userId}/validate&quot;, userId)&#10;                    .retrieve()&#10;                    .bodyToMono(Boolean.class)&#10;                    .block();&#10;        } catch (WebClientResponseException e) {&#10;            if (e.getStatusCode() == HttpStatus.NOT_FOUND)&#10;                throw new RuntimeException(&quot;User not found&quot;+userId);&#10;            else if (e.getStatusCode() == HttpStatus.BAD_REQUEST)&#10;                throw new RuntimeException(&quot;Invalid user ID: &quot; + userId);&#10;            else&#10;                throw new RuntimeException(&quot;Error validating user: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fitness-microservice/activityservice/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fitness-microservice/activityservice/src/main/resources/application.yml" />
              <option name="originalContent" value="spring:&#10;  application:&#10;    name: activity-service&#10;  data:&#10;    mongodb:&#10;      uri: mongodb://localhost:27017/fitnessactivity&#10;      database: fitnessactivity&#10;&#10;server:&#10;  port: 8082&#10;&#10;eureka:&#10;  client:&#10;    serviceUrl:&#10;      defaultZone: http://localhost:8761/eureka/" />
              <option name="updatedContent" value="spring:&#13;&#10;  application:&#13;&#10;    name: activity-service&#13;&#10;  data:&#13;&#10;    mongodb:&#13;&#10;      uri: mongodb://localhost:27017/fitnessactivity&#13;&#10;      database: fitnessactivity&#13;&#10;&#13;&#10;server:&#13;&#10;  port: 8082&#13;&#10;&#13;&#10;eureka:&#13;&#10;  client:&#13;&#10;    serviceUrl:&#13;&#10;      defaultZone: http://localhost:8761/eureka/&#13;&#10;  instance:&#13;&#10;    hostname: localhost&#13;&#10;    prefer-ip-address: false&#13;&#10;    instance-id: ${spring.application.name}:${server.port}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/fitness-microservice/userservice/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/fitness-microservice/userservice/src/main/resources/application.yml" />
              <option name="originalContent" value="server:&#10;  port: 8081&#10;&#10;spring:&#10;  application:&#10;    name: user-service&#10;  datasource:&#10;    url: jdbc:postgresql://localhost:5432/fitness_user_db&#10;    username: postgres&#10;    password: 123&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: update&#10;    database-platform: org.hibernate.dialect.PostgreSQLDialect&#10;&#10;eureka:&#10;  client:&#10;    serviceUrl:&#10;      defaultZone: http://localhost:8761/eureka/" />
              <option name="updatedContent" value="server:&#13;&#10;  port: 8081&#13;&#10;&#13;&#10;spring:&#13;&#10;  application:&#13;&#10;    name: user-service&#13;&#10;  datasource:&#13;&#10;    url: jdbc:postgresql://localhost:5432/fitness_user_db&#13;&#10;    username: postgres&#13;&#10;    password: 123&#13;&#10;  jpa:&#13;&#10;    hibernate:&#13;&#10;      ddl-auto: update&#13;&#10;    database-platform: org.hibernate.dialect.PostgreSQLDialect&#13;&#10;&#13;&#10;eureka:&#13;&#10;  client:&#13;&#10;    serviceUrl:&#13;&#10;      defaultZone: http://localhost:8761/eureka/&#13;&#10;  instance:&#13;&#10;    hostname: localhost&#13;&#10;    prefer-ip-address: false&#13;&#10;    instance-id: ${spring.application.name}:${server.port}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>